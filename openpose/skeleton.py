import sys
import os
import random
import subprocess
from pathlib import Path

#Rudementary, but replaces placeholder values for label and labelindex generated by OpenPose coco output to the actual values needed
#Done as it's difficult to send these values to the openpose demo without fully reconfiguring... this method is simply easier
def replace(label, index, type, videoName):
    path = skeleton_folder+'/fd_'+type+'/'+Path(videoName).stem+'.json'

    with open(path, 'r') as file:
        filedata = file.read()
        file.close()

    filedata = filedata.replace('placeholder1', label).replace('placeholder2', index)
    
    with open(path, 'w') as file:
        file.write(filedata)
        file.close()

#Using train/test txt files to create test/train split if it doesn't already exist
def makeTrainSplit(testPath, trainPath, fightDir, nonFightDir):
    if(os.path.getsize(testPath) == 0 | os.path.getsize(trainPath) == 0 ):
        fightVideos = [f for f in os.listdir(fightDir) if f.endswith(".mp4")]
        noFightVideos = [f for f in os.listdir(nonFightDir) if f.endswith(".mp4")]

        random.shuffle(fightVideos)
        random.shuffle(noFightVideos)

        #Standard 80%/20% split
        splitSize = int(0.8*len(fightVideos))

        fightTrain = fightVideos[:splitSize]
        fightTest = fightVideos[splitSize:]
        nonFightTrain = noFightVideos[:splitSize]
        nonFightTest = noFightVideos[splitSize:]
        
        with open(trainPath, 'w') as file:
            for video in fightTrain:
                file.write("fight/"+video+"\n")
            for video in nonFightTrain:
                file.write("noFight/"+video+"\n")

        with open(testPath, 'w') as file:
            for video in fightTest:
                file.write("fight/"+video+"\n")
            for video in nonFightTest:
                file.write("noFight/"+video+"\n")


if __name__ == "__main__":
    #Configure these as needed for your inputs/outputs
    videos_folder = '../st_gcn/data/fight-detection/videos'
    skeleton_folder = '../st_gcn/data/fight-detection/skeleton'
    fightDir = videos_folder + '/fight'
    nonFightDir = videos_folder + '/noFight'

    files = ['fight/'+f for f in os.listdir(fightDir)]
    files.extend(['noFight/'+ f for f in os.listdir(nonFightDir)])

    trainPath = '../st_gcn/data/fight-detection/train.txt'
    testPath = '../st_gcn/data/fight-detection/test.txt'

    #Only runs this when test/trainpath are empty
    makeTrainSplit(testPath, trainPath, fightDir, nonFightDir)

    trainfiles = []
    testfiles = []
    
    #Loads the train/test files
    with open('../st_gcn/data/fight-detection/train.txt', 'r') as file:
        for line in file:
            trainfiles.append(line.strip())

    with open('../st_gcn/data/fight-detection/test.txt', 'r') as file:
        for line in file:
            testfiles.append(line.strip())

    #ClassIDs contains numeric values and class names for fight/nonfight.
    #Maps fight to 1; noFight to 2
    category_index_map = {}
    with open('../st_gcn/data/fight-detection/classIDs.txt', 'r') as file:
        for line in file:
            word, number = line.strip().split()
            category_index_map[word] = number

    #Loads file to store generated labels for skeleton videos
    trainlabel = open(skeleton_folder+'/'+'fd_train_label.json', 'w+')
    trainlabel.write("{")

    vallabel = open(skeleton_folder+'/'+'fd_val_label.json', 'w+')
    vallabel.write("{")

    for video in files:
        category = video.split('/')[0]
        videoName = video.split('/')[1]
        index = category_index_map.get(category)

        if video in trainfiles:
            videotype = "train"
            writer = trainlabel
        else:
            videotype = "val"
            writer = vallabel
        
        #Command is used to call openpose demo and output skeleton data in configured coco_json format
        #--keypoint_scale 3 ensures keypoints are represented as a fraction of the width/height; 0<=x<=1, 0<=y<=1
        jsonPath = skeleton_folder+'/fd_'+videotype+'/'+Path(video).stem+'.json'
        file = open(jsonPath, 'w+')
        command = "../openpose/build/bin/OpenPoseDemo.exe"+" --write_coco_json "+ jsonPath +" --keypoint_scale 3"+" --video "+videos_folder+'/'+video
        subprocess.run(command, check=True)
        file.close()

        #Replaces placeholder values with actual values
        replace(category,index,videotype,videoName)            

        #Manual writing of json files indexing the types of skeleton data videos generated
        writer.write("\n\t\""+Path(video).stem+"\": {")
        writer.write("\n\t\t\"has_skeleton\": true, ")
        writer.write("\n\t\t\"label\": \""+category+"\",")
        writer.write("\n\t\t\"label_index\": "+index)
        writer.write("\n\t},")
  
    trainlabel.write("\n}")
    vallabel.write("\n}")

    trainlabel.close()
    vallabel.close()

